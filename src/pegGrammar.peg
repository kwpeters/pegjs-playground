start =
numericPredicate / stringPredicate / booleanPredicate;

booleanPredicate =
not:"!" ? value:varReferenceEvalBoolean
{
    if (not) {
        return !value;
    }
    else {
        return value;
    }
}

stringPredicate =
lhs:varReferenceEvalString ws stringOperator:stringOperator ws rhs:string
{
    return stringOperator(lhs, rhs);
}

string =
'"' text:$[^"]* '"'
{
    return text;
}

stringOperator =
op:("!=" / "=")
{
    if (op === "!=") {
        return function notEqualString(lhs, rhs) { return lhs !== rhs; }
    }
    else {
        return function equalString(lhs, rhs) { return lhs === rhs; }
    }
}

numericPredicate =
lhs:varReferenceEvalNumber ws relationalOperator:relationalOperator ws rhs:number
{
    return relationalOperator(lhs, rhs);
}

relationalOperator =
op:("<" / "=" / ">")
{
    if (op === "<") {
        return function lessThanNumber(lhs, rhs) { return lhs < rhs; }
    }
    else if (op === "=") {
        return function equal(lhs, rhs) { return lhs === rhs; }
    }
    else {
        return function greaterThanNumber(lhs, rhs) { return lhs > rhs; }
    }

}

varReferenceEvalNumber =
value: varReferenceEval
& {
    return typeof value === "number";
}
{
    return value;
}

varReferenceEvalString =
value: varReferenceEval
& {
    return typeof value === "string";
}
{
    return value;
}

varReferenceEvalBoolean =
value: varReferenceEval
& {
    return typeof value === "boolean";
}
{
    return value;
}

varReferenceEval =
varReferenceHeadEval: identifierEval tailPropNames: varReferenceTail?
{
    let curContext = varReferenceHeadEval;
    while (tailPropNames.length > 0) {
        const curPropName = tailPropNames.shift();

        if (!curContext.hasOwnProperty(curPropName)) {
            throw new Error("Property '" + curPropName + "' does not exist.");
        }

        curContext = curContext[curPropName];
    }
    return curContext;
}

varReferenceTail =
"." next: identifier tailPropNames: varReferenceTail?
{
    var retVal;
    if (tailPropNames) {
        retVal = [next].concat(tailPropNames);
    }
    else {
        retVal = [next];
    }
    return retVal;
}

identifierEval =
id: identifier
{
    return options.evalContext[id];
}

identifier =
$ [a-zA-Z0-9]+

number =
text:$[0-9]+
{
    return parseInt(text, 10);
}

ws "whitespace" =
[ \t\n\r]*
{
}
